import os
TOKEN = os.environ['TELEGRAM_BOT_TOKEN']
SUPABASE_URL = os.environ['SUPABASE_URL']
SUPABASE_KEY = os.environ['SUPABASE_KEY']
HF_API_KEY = os.environ.get('HF_API_KEY', '')  # –Ø–∫—â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ HFimport logging
import logging
import time
import re
import asyncio
import requests
from datetime import datetime, timedelta, timezone
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler
)
from dotenv import load_dotenv
from supabase import create_client, Client
import uuid
from datetime import datetime, timezone

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
load_dotenv()
TOKEN = os.environ["TELEGRAM_BOT_TOKEN"]
SUPABASE_URL = os.getenv("SUPABASE_URL", "").strip()
SUPABASE_KEY = os.getenv("SUPABASE_KEY", "").strip()
HF_API_KEY = os.getenv("HF_API_KEY", "").strip()
NETLIFY_URL = os.getenv("NETLIFY_URL", "https://your-site.netlify.app").strip()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
MAIN_MENU, AGE, GENDER, FOCUS_AREA, CHALLENGE, FEEDBACK, FEEDBACK_REASON = range(7)

# –¢–µ–∫—Å—Ç–∏
WELCOME_TEXT = (
    "üåø –í—ñ—Ç–∞—é! –Ø ‚Äî Mental Bot\n"
    "–¢–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —Å–∞–º–æ—Ä–æ–∑–≤–∏—Ç–∫—É —Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.\n\n"
    "–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ üëá"
)

ABOUT_TEXT = (
    "‚ÑπÔ∏è *–ü—Ä–æ –ø—Ä–æ–µ–∫—Ç Mental*:\n\n"
    "–ú–∏ ‚Äî –∫–æ–º–∞–Ω–¥–∞ –µ–Ω—Ç—É–∑—ñ–∞—Å—Ç—ñ–≤, —è–∫–∞ –≤—ñ—Ä–∏—Ç—å, —â–æ –∫–æ–∂–µ–Ω –º–æ–∂–µ —Å—Ç–∞—Ç–∏ –∫—Ä–∞—â–æ—é –≤–µ—Ä—Å—ñ—î—é —Å–µ–±–µ. "
    "–ù–∞—à–∞ –º—ñ—Å—ñ—è ‚Äî –¥–æ–ø–æ–º–æ–≥—Ç–∏ —Ç–æ–±—ñ –ø—ñ–¥–≤–∏—â–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ç–∞ –¥–æ—Å—è–≥—Ç–∏ —Ü—ñ–ª–µ–π.\n\n"
    "–¶–µ–π –±–æ—Ç ‚Äî —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫, —è–∫–∏–π:\n"
    "‚Ä¢ –î–æ–ø–æ–º–∞–≥–∞—î –≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏\n"
    "‚Ä¢ –ù–∞–¥–∞—î –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—ó\n"
    "‚Ä¢ –î–æ–ø–æ–º–∞–≥–∞—î –ø–æ–¥–æ–ª–∞—Ç–∏ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü—ñ—é\n"
    "‚Ä¢ –ü—ñ–¥—Ç—Ä–∏–º—É—î –Ω–∞ —à–ª—è—Ö—É –¥–æ —Ç–≤–æ—ó—Ö —Ü—ñ–ª–µ–π"
)

SOCIAL_TEXT = (
    "üåê *–ù–∞—à—ñ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ —Ç–∞ –∫–∞–Ω–∞–ª–∏*:\n"
    "–°–ª—ñ–¥–∫—É–π –∑–∞ –Ω–∞–º–∏ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö, —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏, –ø–æ—Ä–∞–¥–∏ —Ç–∞ –º–æ—Ç–∏–≤–∞—Ü—ñ—é!"
)

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def main_menu_keyboard():
    return [
        [InlineKeyboardButton("üß† –û–¢–†–ò–ú–ê–¢–ò –ü–†–û–§–Ü–õ–¨", callback_data="get_profile")],
        [InlineKeyboardButton("üìö –ú–û–á –ü–†–û–§–Ü–õ–Ü", callback_data="my_profiles")],
        [InlineKeyboardButton("üåê –°–û–¶–ú–ï–†–ï–ñ–Ü", callback_data="social")],
        [InlineKeyboardButton("‚ùì –ü–†–û –ü–†–û–ï–ö–¢", callback_data="about")]
    ]

# –°—Ç–∞—Ä—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = main_menu_keyboard()
    await update.message.reply_text(
        WELCOME_TEXT,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return MAIN_MENU

# –û–±—Ä–æ–±–Ω–∏–∫ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == "get_profile":
        context.user_data.clear()
        keyboard = [
            [InlineKeyboardButton("18-24", callback_data="18-24")],
            [InlineKeyboardButton("25-34", callback_data="25-34")],
            [InlineKeyboardButton("35-44", callback_data="35-44")],
            [InlineKeyboardButton("45+", callback_data="45+")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        await query.edit_message_text(
            text="üîÆ **–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –≤—ñ–∫–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:**",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return AGE
        
    elif query.data == "my_profiles":
        return await show_profiles(query, context)
        
    elif query.data == "social":
        keyboard = [
            [InlineKeyboardButton("üì¢ –ù–∞—à Telegram-–∫–∞–Ω–∞–ª", url="https://t.me/ATeO682")],
            [InlineKeyboardButton("Instagram", url="https://instagram.com/")],
            [InlineKeyboardButton("TikTok", url="https://www.tiktok.com/uk-UA")],
            [InlineKeyboardButton("Patreon", url="https://www.patreon.com/ru-RU")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        await query.edit_message_text(
            text=SOCIAL_TEXT,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return MAIN_MENU
        
    elif query.data == "about":
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
        await query.edit_message_text(
            text=ABOUT_TEXT,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return MAIN_MENU
        
    elif query.data == "back":
        return await show_main_menu(query)
        
    return MAIN_MENU

# –ü–∏—Ç–∞–Ω–Ω—è 1: –í—ñ–∫
async def handle_age(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        return await show_main_menu(query)
    
    context.user_data['age'] = query.data
    
    # –ü–∏—Ç–∞–Ω–Ω—è 2: –°—Ç–∞—Ç—å
    keyboard = [
        [InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ–∫", callback_data="male")],
        [InlineKeyboardButton("–ñ—ñ–Ω–∫–∞", callback_data="female")],
        [InlineKeyboardButton("–Ü–Ω—à–µ/–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏", callback_data="other")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    await query.edit_message_text(
        text="üë§ **–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å:**",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return GENDER

# –ü–∏—Ç–∞–Ω–Ω—è 2: –°—Ç–∞—Ç—å
async def handle_gender(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        keyboard = [
            [InlineKeyboardButton("18-24", callback_data="18-24")],
            [InlineKeyboardButton("25-34", callback_data="25-34")],
            [InlineKeyboardButton("35-44", callback_data="35-44")],
            [InlineKeyboardButton("45+", callback_data="45+")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        await query.edit_message_text(
            text="üîÆ **–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –≤—ñ–∫–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:**",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return AGE
    
    context.user_data['gender'] = query.data
    
    # –ü–∏—Ç–∞–Ω–Ω—è 3: –û—Å–Ω–æ–≤–Ω–∞ —Å—Ñ–µ—Ä–∞ —Ñ–æ–∫—É—Å—É
    keyboard = [
        [InlineKeyboardButton("–ö–∞—Ä'—î—Ä–∞ —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ä—ñ—Å—Ç", callback_data="career")],
        [InlineKeyboardButton("–û—Å–æ–±–∏—Å—Ç—ñ —Å—Ç–æ—Å—É–Ω–∫–∏", callback_data="relationships")],
        [InlineKeyboardButton("–§—ñ–Ω–∞–Ω—Å–æ–≤–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å", callback_data="finance")],
        [InlineKeyboardButton("–§—ñ–∑–∏—á–Ω–µ –∑–¥–æ—Ä–æ–≤'—è", callback_data="health")],
        [InlineKeyboardButton("–ü—Å–∏—Ö—ñ—á–Ω–∏–π –¥–æ–±—Ä–æ–±—É—Ç", callback_data="wellbeing")],
        [InlineKeyboardButton("–û—Å–æ–±–∏—Å—Ç–∏–π —Ä–æ–∑–≤–∏—Ç–æ–∫", callback_data="self_improvement")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    await query.edit_message_text(
        text="üéØ **–£ —è–∫—ñ–π —Å—Ñ–µ—Ä—ñ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ—Å—è–≥—Ç–∏ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É?**\n"
             "–¶–µ–π –≤–∏–±—ñ—Ä –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω –¥—ñ–π.",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return FOCUS_AREA

# –ü–∏—Ç–∞–Ω–Ω—è 3: –û—Å–Ω–æ–≤–Ω–∞ —Å—Ñ–µ—Ä–∞ —Ñ–æ–∫—É—Å—É
async def handle_focus_area(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        keyboard = [
            [InlineKeyboardButton("–ß–æ–ª–æ–≤—ñ–∫", callback_data="male")],
            [InlineKeyboardButton("–ñ—ñ–Ω–∫–∞", callback_data="female")],
            [InlineKeyboardButton("–Ü–Ω—à–µ/–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏", callback_data="other")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        await query.edit_message_text(
            text="üë§ **–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å:**",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return GENDER
    
    context.user_data['focus_area'] = query.data
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–ª–µ–∂–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è
    questions = {
        "career": {
            "text": "üíº **–Ø–∫–∏–π –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –≤–∏–∫–ª–∏–∫ –¥–ª—è –≤–∞—Å –Ω–∞–π–∞–∫—Ç—É–∞–ª—å–Ω—ñ—à–∏–π?**",
            "options": [
                ["–ó–Ω–∞–π—Ç–∏ –Ω–æ–≤—É —Ä–æ–±–æ—Ç—É", "new_job"],
                ["–ü—ñ–¥–≤–∏—â–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", "productivity"],
                ["–ü–æ–¥–æ–ª–∞—Ç–∏ –≤–∏–≥–æ—Ä–∞–Ω–Ω—è", "burnout"],
                ["–†–æ–∑–≤–∏–Ω—É—Ç–∏ –ª—ñ–¥–µ—Ä—Å—å–∫—ñ —è–∫–æ—Å—Ç—ñ", "leadership"]
            ]
        },
        "relationships": {
            "text": "‚ù§Ô∏è **–©–æ –¥–ª—è –≤–∞—Å –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–µ —É —Å—Ç–æ—Å—É–Ω–∫–∞—Ö –∑–∞—Ä–∞–∑?**",
            "options": [
                ["–ü–æ–∫—Ä–∞—â–∏—Ç–∏ —ñ—Å–Ω—É—é—á—ñ —Å—Ç–æ—Å—É–Ω–∫–∏", "improve_relations"],
                ["–ó–Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞", "find_partner"],
                ["–í–∏—Ä—ñ—à–∏—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏", "resolve_conflicts"],
                ["–ü–æ–±—É–¥—É–≤–∞—Ç–∏ –∑–¥–æ—Ä–æ–≤—ñ –º–µ–∂—ñ", "set_boundaries"]
            ]
        },
        "finance": {
            "text": "üí∞ **–Ø–∫–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —î –Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à–∏–º?**",
            "options": [
                ["–ó–±—ñ–ª—å—à–∏—Ç–∏ –¥–æ—Ö–æ–¥–∏", "increase_income"],
                ["–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏", "optimize_expenses"],
                ["–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—É –ø–æ–¥—É—à–∫—É", "financial_cushion"],
                ["–ü–æ—á–∞—Ç–∏ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏", "start_investing"]
            ]
        },
        "health": {
            "text": "üí™ **–ù–∞ —è–∫–æ–º—É –∞—Å–ø–µ–∫—Ç—ñ –∑–¥–æ—Ä–æ–≤'—è –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–æ—Å–µ—Ä–µ–¥–∏—Ç–∏—Å—å?**",
            "options": [
                ["–ü–æ–∫—Ä–∞—â–∏—Ç–∏ —Ñ—ñ–∑–∏—á–Ω—É —Ñ–æ—Ä–º—É", "improve_fitness"],
                ["–ù–∞–ª–∞–≥–æ–¥–∏—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è", "improve_nutrition"],
                ["–ü–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–æ–Ω", "improve_sleep"],
                ["–ü–æ–¥–æ–ª–∞—Ç–∏ —Ö—Ä–æ–Ω—ñ—á–Ω—É –≤—Ç–æ–º—É", "overcome_fatigue"]
            ]
        },
        "wellbeing": {
            "text": "üß† **–©–æ –Ω–∞–π–±—ñ–ª—å—à–µ –≤–ø–ª–∏–≤–∞—î –Ω–∞ –≤–∞—à –ø—Å–∏—Ö—ñ—á–Ω–∏–π —Å—Ç–∞–Ω?**",
            "options": [
                ["–ó–º–µ–Ω—à–∏—Ç–∏ —Å—Ç—Ä–µ—Å", "reduce_stress"],
                ["–ü—ñ–¥–≤–∏—â–∏—Ç–∏ —Å–∞–º–æ–ø–æ–≤–∞–≥—É", "increase_selfesteem"],
                ["–ü–æ–¥–æ–ª–∞—Ç–∏ —Ç—Ä–∏–≤–æ–∂–Ω—ñ—Å—Ç—å", "overcome_anxiety"],
                ["–ó–Ω–∞–π—Ç–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –±–∞–ª–∞–Ω—Å", "find_balance"]
            ]
        },
        "self_improvement": {
            "text": "üå± **–Ø–∫–∏–π –Ω–∞–≤–∏–∫ –≤–∏ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–≤–∏–Ω—É—Ç–∏ –≤ –ø–µ—Ä—à—É —á–µ—Ä–≥—É?**",
            "options": [
                ["–ü–æ–¥–æ–ª–∞—Ç–∏ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü—ñ—é", "overcome_procrastination"],
                ["–ù–∞–≤—á–∏—Ç–∏—Å—å –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –Ω–∞–≤—á–∞—Ç–∏—Å—å", "learn_to_learn"],
                ["–†–æ–∑–≤–∏–Ω—É—Ç–∏ –Ω–æ–≤—É –∑–≤–∏—á–∫—É", "develop_habit"],
                ["–ü–æ–∫—Ä–∞—â–∏—Ç–∏ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", "improve_timemanagement"]
            ]
        }
    }
    
    q = questions[query.data]
    keyboard = [
        [InlineKeyboardButton(text, callback_data=data)] for text, data in q['options']
    ] + [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]]
    
    await query.edit_message_text(
        text=q['text'],
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return CHALLENGE

# –ü–∏—Ç–∞–Ω–Ω—è 4: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –∑–∞–ø–∏—Ç —Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é
async def handle_challenge(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        keyboard = [
            [InlineKeyboardButton("–ö–∞—Ä'—î—Ä–∞ —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Ä—ñ—Å—Ç", callback_data="career")],
            [InlineKeyboardButton("–û—Å–æ–±–∏—Å—Ç—ñ —Å—Ç–æ—Å—É–Ω–∫–∏", callback_data="relationships")],
            [InlineKeyboardButton("–§—ñ–Ω–∞–Ω—Å–æ–≤–∞ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å", callback_data="finance")],
            [InlineKeyboardButton("–§—ñ–∑–∏—á–Ω–µ –∑–¥–æ—Ä–æ–≤'—è", callback_data="health")],
            [InlineKeyboardButton("–ü—Å–∏—Ö—ñ—á–Ω–∏–π –¥–æ–±—Ä–æ–±—É—Ç", callback_data="wellbeing")],
            [InlineKeyboardButton("–û—Å–æ–±–∏—Å—Ç–∏–π —Ä–æ–∑–≤–∏—Ç–æ–∫", callback_data="self_improvement")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        await query.edit_message_text(
            text="üéØ **–£ —è–∫—ñ–π —Å—Ñ–µ—Ä—ñ –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ—Å—è–≥—Ç–∏ –Ω–∞–π–±—ñ–ª—å—à–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—É?**",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return FOCUS_AREA
    
    context.user_data['challenge'] = query.data
    
    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–æ—Ü–µ—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
    processing_message = await query.edit_message_text(
        text="‚ú® –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å...",
        parse_mode="Markdown"
    )
    
    # –ê–Ω—ñ–º–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    messages = [
        "üîç –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤–∞—à—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...",
        "üìä –°—Ç–≤–æ—Ä—é—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –ø–ª–∞–Ω...",
        "üé® –î–æ–¥–∞—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ —à—Ç—Ä–∏—Ö–∏..."
    ]
    
    for msg in messages:
        await context.bot.edit_message_text(
            chat_id=query.message.chat_id,
            message_id=processing_message.message_id,
            text=msg,
            parse_mode="Markdown"
        )
        await asyncio.sleep(1.5)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ—Ñ—ñ–ª—é —á–µ—Ä–µ–∑ AI
    try:
        headers = {"Authorization": f"Bearer {HF_API_KEY}"}
        prompt = (
            f"–°—Ç–≤–æ—Ä–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å —É —Ñ–æ—Ä–º–∞—Ç—ñ HTML. "
            f"–í—ñ–∫: {context.user_data['age']}, –°—Ç–∞—Ç—å: {context.user_data['gender']}. "
            f"–°—Ñ–µ—Ä–∞ —Ñ–æ–∫—É—Å—É: {context.user_data['focus_area']}. "
            f"–û—Å–Ω–æ–≤–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: {context.user_data['challenge']}.\n\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ <h2>, —Å–ø–∏—Å–∫–∏ <ul> —Ç–∞ –∞–±–∑–∞—Ü–∏ <p>."
        )
        
        response = requests.post(
            "https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.1",
            headers=headers,
            json={"inputs": prompt},
            timeout=45
        )
        
        if response.status_code == 200:
            profile_content = response.json()[0]['generated_text']
        else:
            logger.error(f"HF API error: {response.status_code} - {response.text}")
            profile_content = "<h1>–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó</h1><p>–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ</p>"
    except Exception as e:
        logger.error(f"AI generation error: {str(e)}")
        profile_content = "<h1>–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞</h1><p>–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –¥–µ–∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω</p>"
    
    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö (–æ–Ω–æ–≤–ª–µ–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞)
    user_id = query.from_user.id
    profile_id = str(uuid.uuid4())  # –ì–µ–Ω–µ—Ä—É—î–º–æ UUID —è–∫ —Å—Ç—Ä–æ–∫—É
    profile_url = f"{NETLIFY_URL}/.netlify/functions/get-profile?id={profile_id}"
    
    try:
        profile_data = {
            "id": profile_id,
            "user_id": user_id,
            "username": query.from_user.username or f"user{user_id}",
            "first_name": query.from_user.first_name,
            "age_group": context.user_data['age'],
            "gender": context.user_data['gender'],
            "focus_area": context.user_data['focus_area'],
            "challenge": context.user_data['challenge'],
            "profile_content": profile_content,
            "profile_url": profile_url,
            "created_at": datetime.now(timezone.utc).isoformat()
        }
        
        supabase.table("profiles").insert(profile_data).execute()
        context.user_data['profile_id'] = profile_id
        context.user_data['profile_url'] = profile_url
        
    except Exception as e:
        logger.error(f"Supabase save error: {str(e)}")
        profile_url = f"{NETLIFY_URL}/error"
        context.user_data['profile_url'] = profile_url
    
    # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    user_name = query.from_user.first_name or "–î—Ä—É–∂–µ"
    text = (
        f"‚ú® {user_name}, –≤–∞—à –æ—Å–æ–±–∏—Å—Ç–∏–π –ø—Ä–æ—Ñ—ñ–ª—å –≥–æ—Ç–æ–≤–∏–π!\n\n"
        f"–ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n{profile_url}"
    )
    
    await context.bot.edit_message_text(
        chat_id=query.message.chat_id,
        message_id=processing_message.message_id,
        text=text,
        parse_mode=None
    )
    
    # –ó–∞–ø–∏—Ç –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
    keyboard = [
        [InlineKeyboardButton("üëç –¢–∞–∫, —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å!", callback_data="feedback_yes")],
        [InlineKeyboardButton("üëé –ù—ñ, –Ω–µ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å", callback_data="feedback_no")]
    ]
    
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="üí¨ –ß–∏ —Å–ø–æ–¥–æ–±–∞–≤—Å—è –≤–∞–º –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å?",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    
    return FEEDBACK
# –û–±—Ä–æ–±–Ω–∏–∫ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
async def handle_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    try:
        await context.bot.delete_message(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {str(e)}")
    
    if query.data == "feedback_yes":
        try:
            supabase.table("feedback").insert({
                "profile_id": context.user_data.get('profile_id'),
                "user_id": query.from_user.id,
                "liked": True,
                "created_at": datetime.now(timezone.utc).isoformat()
            }).execute()
        except Exception as e:
            logger.error(f"Feedback save error: {str(e)}")
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –ü—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç", callback_data="donate")],
            [InlineKeyboardButton("üì§ –ü–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ø—Ä–æ—Ñ—ñ–ª–µ–º", switch_inline_query=f"–ú—ñ–π –ø—Å–∏—Ö–æ–ª–æ–≥—ñ—á–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å: {context.user_data.get('profile_url', '')}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back")]
        ]
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üéâ –†–∞–¥—ñ, —â–æ –≤–∞–º —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å!\n\n"
                 "–Ø–∫—â–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç, –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –¥–æ–Ω–∞—Ç. "
                 "–¶–µ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ –±–æ—Ç–∞ —Ç–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return MAIN_MENU
        
    elif query.data == "feedback_no":
        try:
            supabase.table("feedback").insert({
                "profile_id": context.user_data.get('profile_id'),
                "user_id": query.from_user.id,
                "liked": False,
                "created_at": datetime.now(timezone.utc).isoformat()
            }).execute()
        except Exception as e:
            logger.error(f"Feedback save error: {str(e)}")
        
        keyboard = [
            [InlineKeyboardButton("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ", callback_data="reason_not_personal")],
            [InlineKeyboardButton("–ù–µ–∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏", callback_data="reason_not_helpful")],
            [InlineKeyboardButton("–ü–æ–≥–∞–Ω–∏–π –¥–∏–∑–∞–π–Ω", callback_data="reason_bad_design")],
            [InlineKeyboardButton("–Ü–Ω—à–∞ –ø—Ä–∏—á–∏–Ω–∞", callback_data="reason_other")]
        ]
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="üòî –®–∫–æ–¥—É—î–º–æ, —â–æ –≤–∞–º –Ω–µ —Å–ø–æ–¥–æ–±–∞–ª–æ—Å—å.\n\n"
                 "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É, —â–æ–± –º–∏ –º–æ–≥–ª–∏ –ø–æ–∫—Ä–∞—â–∏—Ç–∏ —Å–µ—Ä–≤—ñ—Å:",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return FEEDBACK_REASON

# –û–±—Ä–æ–±–Ω–∏–∫ –ø—Ä–∏—á–∏–Ω–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –≤—ñ–¥–≥—É–∫—É
async def handle_feedback_reason(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    reason = query.data.replace("reason_", "")
    
    try:
        supabase.table("feedback").update({
            "reason": reason
        }).eq("user_id", query.from_user.id).order("created_at", desc=True).limit(1).execute()
    except Exception as e:
        logger.error(f"Feedback reason save error: {str(e)}")
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data="back")]]
    
    await query.edit_message_text(
        text="üôè –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫! –ú–∏ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—Ä–∞—Ö—É—î–º–æ –π–æ–≥–æ –ø—Ä–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—ñ —Å–µ—Ä–≤—ñ—Å—É.",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return MAIN_MENU

# –û–±—Ä–æ–±–Ω–∏–∫ –¥–æ–Ω–∞—Ç—É
async def handle_donate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    text = (
        "üíõ **–î—è–∫—É—î–º–æ –∑–∞ –±–∞–∂–∞–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç!**\n\n"
        "Mental —Å—Ç–≤–æ—Ä—é—é—Ç—å —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å—Ç—É–¥–µ–Ω—Ç–∏-–ø—Å–∏—Ö–æ–ª–æ–≥–∏. –í–∞—à–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–æ–ø–æ–º–æ–∂–µ:\n"
        "‚Ä¢ –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ –ø—Ä–æ–µ–∫—Ç\n"
        "‚Ä¢ –°—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –∞–Ω–∞–ª—ñ–∑—É\n"
        "‚Ä¢ –î–æ–ø–æ–º–∞–≥–∞—Ç–∏ —ñ–Ω—à–∏–º –∑–Ω–∞–π—Ç–∏ —Å–µ–±–µ\n\n"
        "[–¢–∏—Ü—å–Ω—ñ—Ç—å —Ç—É—Ç, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –¥–æ–Ω–∞—Ç](https://example.com/donate)"
    )
    
    await query.edit_message_text(
        text=text,
        parse_mode="Markdown",
        disable_web_page_preview=True
    )
    return MAIN_MENU

# –ü–æ–∫–∞–∑–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ
async def show_profiles(query, context):
    user_id = query.from_user.id
    try:
        response = supabase.table("profiles").select("*").eq("user_id", user_id).order("created_at", desc=True).execute()
        profiles = response.data
        
        if not profiles:
            await query.edit_message_text(
                text="üì≠ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤. –°—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—à–∏–π!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]])
            )
            return MAIN_MENU
        
        keyboard = []
        for profile in profiles:
            created_date = datetime.fromisoformat(profile['created_at']).strftime("%d.%m.%Y")
            profile_name = f"{get_focus_label(profile['focus_area'])} - {get_challenge_label(profile['challenge'])} ({created_date})"
            keyboard.append([InlineKeyboardButton(profile_name, url=profile['profile_url'])])
        
        keyboard.append([InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ—Ñ—ñ–ª—ñ —Å—Ç–∞—Ä—à—ñ 30 –¥–Ω—ñ–≤", callback_data="delete_old")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")])
        
        await query.edit_message_text(
            text="üìö –í–∞—à—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ:\n(–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏)",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return MAIN_MENU
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤: {e}")
        await query.edit_message_text(
            text="‚ùóÔ∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–∞—à–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]])
        )
        return MAIN_MENU

# –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ
async def delete_old_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    cutoff_date = (datetime.now(timezone.utc) - timedelta(days=30)).isoformat()
    
    try:
        response = supabase.table("profiles").delete().eq("user_id", user_id).lt("created_at", cutoff_date).execute()
        deleted_count = len(response.data)
        
        await query.edit_message_text(
            text=f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤!",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]])
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—ñ–≤: {e}")
        await query.edit_message_text(
            text="‚ùóÔ∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back")]])
        )
    
    return MAIN_MENU

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫–∞–∑—É –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def show_main_menu(query):
    keyboard = main_menu_keyboard()
    await query.edit_message_text(
        text=WELCOME_TEXT,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    return MAIN_MENU

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
def get_gender_label(gender_code):
    labels = {
        "male": "–ß–æ–ª–æ–≤—ñ–∫",
        "female": "–ñ—ñ–Ω–∫–∞",
        "other": "–Ü–Ω—à–µ/–ù–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏"
    }
    return labels.get(gender_code, "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")

def get_focus_label(focus_code):
    labels = {
        "career": "–ö–∞—Ä'—î—Ä–∞",
        "relationships": "–°—Ç–æ—Å—É–Ω–∫–∏",
        "finance": "–§—ñ–Ω–∞–Ω—Å–∏",
        "health": "–ó–¥–æ—Ä–æ–≤'—è",
        "wellbeing": "–ü—Å–∏—Ö. –¥–æ–±—Ä–æ–±—É—Ç",
        "self_improvement": "–û—Å–æ–±. —Ä–æ–∑–≤–∏—Ç–æ–∫"
    }
    return labels.get(focus_code, "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")

def get_challenge_label(challenge_code):
    labels = {
        "new_job": "–ù–æ–≤–∞ —Ä–æ–±–æ—Ç–∞",
        "productivity": "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å",
        "burnout": "–í–∏–≥–æ—Ä–∞–Ω–Ω—è",
        "leadership": "–õ—ñ–¥–µ—Ä—Å—Ç–≤–æ",
        "improve_relations": "–ü–æ–∫—Ä–∞—â–∏—Ç–∏ —Å—Ç–æ—Å—É–Ω–∫–∏",
        "find_partner": "–ó–Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞",
        "resolve_conflicts": "–í–∏—Ä—ñ—à–∏—Ç–∏ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç–∏",
        "set_boundaries": "–ó–¥–æ—Ä–æ–≤—ñ –º–µ–∂—ñ",
        "increase_income": "–ó–±—ñ–ª—å—à–∏—Ç–∏ –¥–æ—Ö–æ–¥–∏",
        "optimize_expenses": "–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏",
        "financial_cushion": "–§—ñ–Ω. –ø–æ–¥—É—à–∫–∞",
        "start_investing": "–Ü–Ω–≤–µ—Å—Ç—É–≤–∞–Ω–Ω—è",
        "improve_fitness": "–§—ñ—Ç–Ω–µ—Å",
        "improve_nutrition": "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è",
        "improve_sleep": "–°–æ–Ω",
        "overcome_fatigue": "–•—Ä–æ–Ω—ñ—á–Ω–∞ –≤—Ç–æ–º–∞",
        "reduce_stress": "–ó–º–µ–Ω—à–∏—Ç–∏ —Å—Ç—Ä–µ—Å",
        "increase_selfesteem": "–°–∞–º–æ–ø–æ–≤–∞–≥–∞",
        "overcome_anxiety": "–¢—Ä–∏–≤–æ–∂–Ω—ñ—Å—Ç—å",
        "find_balance": "–í–Ω—É—Ç—Ä. –±–∞–ª–∞–Ω—Å",
        "overcome_procrastination": "–ü—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü—ñ—è",
        "learn_to_learn": "–ï—Ñ–µ–∫—Ç–∏–≤–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è",
        "develop_habit": "–ù–æ–≤—ñ –∑–≤–∏—á–∫–∏",
        "improve_timemanagement": "–¢–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç"
    }
    return labels.get(challenge_code, "–ù–µ –≤–∫–∞–∑–∞–Ω–æ")

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error("Exception while handling an update:", exc_info=context.error)
    if update.message:
        await update.message.reply_text("‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main() -> None:
    application = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [CallbackQueryHandler(main_menu)],
            AGE: [CallbackQueryHandler(handle_age)],
            GENDER: [CallbackQueryHandler(handle_gender)],
            FOCUS_AREA: [CallbackQueryHandler(handle_focus_area)],
            CHALLENGE: [CallbackQueryHandler(handle_challenge)],
            FEEDBACK: [CallbackQueryHandler(handle_feedback)],
            FEEDBACK_REASON: [CallbackQueryHandler(handle_feedback_reason)]
        },
        fallbacks=[
            CallbackQueryHandler(main_menu, pattern="^back$"),
            CommandHandler('start', start)
        ]
    )
    
    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(handle_donate, pattern="^donate$"))
    application.add_handler(CallbackQueryHandler(delete_old_profiles, pattern="^delete_old$"))
    application.add_error_handler(error_handler)
    
    print("–ë–æ—Ç Mental –∑–∞–ø—É—â–µ–Ω–æ! –ß–µ–∫–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...")
    application.run_polling()

if __name__ == '__main__':
    main()
